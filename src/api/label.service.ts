/**
 * The Confluence Cloud REST API v2
 * This document describes Confluence\'s v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { LabelSortOrder } from '../model/labelSortOrder';
import { MultiEntityResultLabel } from '../model/multiEntityResultLabel';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class LabelService {

    protected basePath = 'https://no-default/wiki/api/v2';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();
    protected httpClient: HttpService;

    constructor(httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
        this.httpClient = configuration?.httpClient || httpClient;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Get labels for attachment
     * Returns the labels of specific attachment. The number of results is limited by the &#x60;limit&#x60; parameter and additional results (if available) will be available through the &#x60;next&#x60; URL present in the &#x60;Link&#x60; response header.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the parent content of the attachment and its corresponding space. Only labels that the user has permission to view will be returned.
     * @param id The ID of the attachment for which labels should be returned.
     * @param prefix Filter the results to labels based on their prefix.
     * @param sort Used to sort the result by a particular field.
     * @param cursor Used for pagination, this opaque cursor will be returned in the &#x60;next&#x60; URL in the &#x60;Link&#x60; response header. Use the relative URL in the &#x60;Link&#x60; header to retrieve the &#x60;next&#x60; set of results.
     * @param limit Maximum number of labels per result to return. If more results exist, use the &#x60;Link&#x60; header to retrieve a relative URL that will return the next set of results.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [getAttachmentLabelsOpts.config] Override http request option.
     */
    public getAttachmentLabels(id: number, prefix?: 'my' | 'team' | 'global' | 'system', sort?: Array<LabelSortOrder>, cursor?: string, limit?: number, getAttachmentLabelsOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<MultiEntityResultLabel>>;
    public getAttachmentLabels(id: number, prefix?: 'my' | 'team' | 'global' | 'system', sort?: Array<LabelSortOrder>, cursor?: string, limit?: number, getAttachmentLabelsOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getAttachmentLabels.');
        }

        let queryParameters = new URLSearchParams();
        if (prefix !== undefined && prefix !== null) {
            queryParameters.append('prefix', <any>prefix);
        }
        if (sort) {
            sort.forEach((element) => {
                queryParameters.append('sort', <any>element);
            })
        }
        if (cursor !== undefined && cursor !== null) {
            queryParameters.append('cursor', <any>cursor);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // authentication (oAuthDefinitions) required
        if (this.configuration.accessToken) {
            accessTokenObservable = typeof this.configuration.accessToken === 'function'
                ? from(Promise.resolve(this.configuration.accessToken()))
                : from(Promise.resolve(this.configuration.accessToken))
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<MultiEntityResultLabel>(`${this.basePath}/attachments/${encodeURIComponent(String(id))}/labels`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        ...getAttachmentLabelsOpts?.config,
                        headers: {...headers, ...getAttachmentLabelsOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Get labels for blog post
     * Returns the labels of specific blog post. The number of results is limited by the &#x60;limit&#x60; parameter and additional results (if available) will be available through the &#x60;next&#x60; URL present in the &#x60;Link&#x60; response header.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content of the blog post and its corresponding space. Only labels that the user has permission to view will be returned.
     * @param id The ID of the blog post for which labels should be returned.
     * @param prefix Filter the results to labels based on their prefix.
     * @param sort Used to sort the result by a particular field.
     * @param cursor Used for pagination, this opaque cursor will be returned in the &#x60;next&#x60; URL in the &#x60;Link&#x60; response header. Use the relative URL in the &#x60;Link&#x60; header to retrieve the &#x60;next&#x60; set of results.
     * @param limit Maximum number of labels per result to return. If more results exist, use the &#x60;Link&#x60; header to retrieve a relative URL that will return the next set of results.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [getBlogPostLabelsOpts.config] Override http request option.
     */
    public getBlogPostLabels(id: number, prefix?: 'my' | 'team' | 'global' | 'system', sort?: Array<LabelSortOrder>, cursor?: string, limit?: number, getBlogPostLabelsOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<MultiEntityResultLabel>>;
    public getBlogPostLabels(id: number, prefix?: 'my' | 'team' | 'global' | 'system', sort?: Array<LabelSortOrder>, cursor?: string, limit?: number, getBlogPostLabelsOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getBlogPostLabels.');
        }

        let queryParameters = new URLSearchParams();
        if (prefix !== undefined && prefix !== null) {
            queryParameters.append('prefix', <any>prefix);
        }
        if (sort) {
            sort.forEach((element) => {
                queryParameters.append('sort', <any>element);
            })
        }
        if (cursor !== undefined && cursor !== null) {
            queryParameters.append('cursor', <any>cursor);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // authentication (oAuthDefinitions) required
        if (this.configuration.accessToken) {
            accessTokenObservable = typeof this.configuration.accessToken === 'function'
                ? from(Promise.resolve(this.configuration.accessToken()))
                : from(Promise.resolve(this.configuration.accessToken))
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<MultiEntityResultLabel>(`${this.basePath}/blogposts/${encodeURIComponent(String(id))}/labels`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        ...getBlogPostLabelsOpts?.config,
                        headers: {...headers, ...getBlogPostLabelsOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Get labels for custom content
     * Returns the labels for a specific piece of custom content. The number of results is limited by the &#x60;limit&#x60; parameter and additional results (if available) will be available through the &#x60;next&#x60; URL present in the &#x60;Link&#x60; response header.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the custom content and its corresponding space. Only labels that the user has permission to view will be returned.
     * @param id The ID of the custom content for which labels should be returned.
     * @param prefix Filter the results to labels based on their prefix.
     * @param sort Used to sort the result by a particular field.
     * @param cursor Used for pagination, this opaque cursor will be returned in the &#x60;next&#x60; URL in the &#x60;Link&#x60; response header. Use the relative URL in the &#x60;Link&#x60; header to retrieve the &#x60;next&#x60; set of results.
     * @param limit Maximum number of labels per result to return. If more results exist, use the &#x60;Link&#x60; header to retrieve a relative URL that will return the next set of results.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [getCustomContentLabelsOpts.config] Override http request option.
     */
    public getCustomContentLabels(id: number, prefix?: 'my' | 'team' | 'global' | 'system', sort?: Array<LabelSortOrder>, cursor?: string, limit?: number, getCustomContentLabelsOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<MultiEntityResultLabel>>;
    public getCustomContentLabels(id: number, prefix?: 'my' | 'team' | 'global' | 'system', sort?: Array<LabelSortOrder>, cursor?: string, limit?: number, getCustomContentLabelsOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCustomContentLabels.');
        }

        let queryParameters = new URLSearchParams();
        if (prefix !== undefined && prefix !== null) {
            queryParameters.append('prefix', <any>prefix);
        }
        if (sort) {
            sort.forEach((element) => {
                queryParameters.append('sort', <any>element);
            })
        }
        if (cursor !== undefined && cursor !== null) {
            queryParameters.append('cursor', <any>cursor);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // authentication (oAuthDefinitions) required
        if (this.configuration.accessToken) {
            accessTokenObservable = typeof this.configuration.accessToken === 'function'
                ? from(Promise.resolve(this.configuration.accessToken()))
                : from(Promise.resolve(this.configuration.accessToken))
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<MultiEntityResultLabel>(`${this.basePath}/custom-content/${encodeURIComponent(String(id))}/labels`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        ...getCustomContentLabelsOpts?.config,
                        headers: {...headers, ...getCustomContentLabelsOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Get labels
     * Returns all labels. The number of results is limited by the &#x60;limit&#x60; parameter and additional results (if available) will be available through the &#x60;next&#x60; URL present in the &#x60;Link&#x60; response header.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (\&#39;Can use\&#39; global permission). Only labels that the user has permission to view will be returned.
     * @param labelId Filters on label ID. Multiple IDs can be specified as a comma-separated list.
     * @param prefix Filters on label prefix. Multiple IDs can be specified as a comma-separated list.
     * @param cursor Used for pagination, this opaque cursor will be returned in the &#x60;next&#x60; URL in the &#x60;Link&#x60; response header. Use the relative URL in the &#x60;Link&#x60; header to retrieve the &#x60;next&#x60; set of results.
     * @param sort Used to sort the result by a particular field.
     * @param limit Maximum number of labels per result to return. If more results exist, use the &#x60;Link&#x60; header to retrieve a relative URL that will return the next set of results.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [getLabelsOpts.config] Override http request option.
     */
    public getLabels(labelId?: Array<number>, prefix?: Array<string>, cursor?: string, sort?: Array<LabelSortOrder>, limit?: number, getLabelsOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<MultiEntityResultLabel>>;
    public getLabels(labelId?: Array<number>, prefix?: Array<string>, cursor?: string, sort?: Array<LabelSortOrder>, limit?: number, getLabelsOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        let queryParameters = new URLSearchParams();
        if (labelId) {
            labelId.forEach((element) => {
                queryParameters.append('label-id', <any>element);
            })
        }
        if (prefix) {
            prefix.forEach((element) => {
                queryParameters.append('prefix', <any>element);
            })
        }
        if (cursor !== undefined && cursor !== null) {
            queryParameters.append('cursor', <any>cursor);
        }
        if (sort) {
            sort.forEach((element) => {
                queryParameters.append('sort', <any>element);
            })
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // authentication (oAuthDefinitions) required
        if (this.configuration.accessToken) {
            accessTokenObservable = typeof this.configuration.accessToken === 'function'
                ? from(Promise.resolve(this.configuration.accessToken()))
                : from(Promise.resolve(this.configuration.accessToken))
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<MultiEntityResultLabel>(`${this.basePath}/labels`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        ...getLabelsOpts?.config,
                        headers: {...headers, ...getLabelsOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Get labels for page
     * Returns the labels of specific page. The number of results is limited by the &#x60;limit&#x60; parameter and additional results (if available) will be available through the &#x60;next&#x60; URL present in the &#x60;Link&#x60; response header.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content of the page and its corresponding space. Only labels that the user has permission to view will be returned.
     * @param id The ID of the page for which labels should be returned.
     * @param prefix Filter the results to labels based on their prefix.
     * @param sort Used to sort the result by a particular field.
     * @param cursor Used for pagination, this opaque cursor will be returned in the &#x60;next&#x60; URL in the &#x60;Link&#x60; response header. Use the relative URL in the &#x60;Link&#x60; header to retrieve the &#x60;next&#x60; set of results.
     * @param limit Maximum number of labels per result to return. If more results exist, use the &#x60;Link&#x60; header to retrieve a relative URL that will return the next set of results.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [getPageLabelsOpts.config] Override http request option.
     */
    public getPageLabels(id: number, prefix?: 'my' | 'team' | 'global' | 'system', sort?: Array<LabelSortOrder>, cursor?: string, limit?: number, getPageLabelsOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<MultiEntityResultLabel>>;
    public getPageLabels(id: number, prefix?: 'my' | 'team' | 'global' | 'system', sort?: Array<LabelSortOrder>, cursor?: string, limit?: number, getPageLabelsOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPageLabels.');
        }

        let queryParameters = new URLSearchParams();
        if (prefix !== undefined && prefix !== null) {
            queryParameters.append('prefix', <any>prefix);
        }
        if (sort) {
            sort.forEach((element) => {
                queryParameters.append('sort', <any>element);
            })
        }
        if (cursor !== undefined && cursor !== null) {
            queryParameters.append('cursor', <any>cursor);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // authentication (oAuthDefinitions) required
        if (this.configuration.accessToken) {
            accessTokenObservable = typeof this.configuration.accessToken === 'function'
                ? from(Promise.resolve(this.configuration.accessToken()))
                : from(Promise.resolve(this.configuration.accessToken))
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<MultiEntityResultLabel>(`${this.basePath}/pages/${encodeURIComponent(String(id))}/labels`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        ...getPageLabelsOpts?.config,
                        headers: {...headers, ...getPageLabelsOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Get labels for space content
     * Returns the labels of space content (pages, blogposts etc). The number of results is limited by the &#x60;limit&#x60; parameter and additional results (if available) will be available through the &#x60;next&#x60; URL present in the &#x60;Link&#x60; response header.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the space. Only labels that the user has permission to view will be returned.
     * @param id The ID of the space for which labels should be returned.
     * @param prefix Filter the results to labels based on their prefix.
     * @param sort Used to sort the result by a particular field.
     * @param cursor Used for pagination, this opaque cursor will be returned in the &#x60;next&#x60; URL in the &#x60;Link&#x60; response header. Use the relative URL in the &#x60;Link&#x60; header to retrieve the &#x60;next&#x60; set of results.
     * @param limit Maximum number of labels per result to return. If more results exist, use the &#x60;Link&#x60; header to retrieve a relative URL that will return the next set of results.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [getSpaceContentLabelsOpts.config] Override http request option.
     */
    public getSpaceContentLabels(id: number, prefix?: 'my' | 'team', sort?: Array<LabelSortOrder>, cursor?: string, limit?: number, getSpaceContentLabelsOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<MultiEntityResultLabel>>;
    public getSpaceContentLabels(id: number, prefix?: 'my' | 'team', sort?: Array<LabelSortOrder>, cursor?: string, limit?: number, getSpaceContentLabelsOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getSpaceContentLabels.');
        }

        let queryParameters = new URLSearchParams();
        if (prefix !== undefined && prefix !== null) {
            queryParameters.append('prefix', <any>prefix);
        }
        if (sort) {
            sort.forEach((element) => {
                queryParameters.append('sort', <any>element);
            })
        }
        if (cursor !== undefined && cursor !== null) {
            queryParameters.append('cursor', <any>cursor);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // authentication (oAuthDefinitions) required
        if (this.configuration.accessToken) {
            accessTokenObservable = typeof this.configuration.accessToken === 'function'
                ? from(Promise.resolve(this.configuration.accessToken()))
                : from(Promise.resolve(this.configuration.accessToken))
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<MultiEntityResultLabel>(`${this.basePath}/spaces/${encodeURIComponent(String(id))}/content/labels`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        ...getSpaceContentLabelsOpts?.config,
                        headers: {...headers, ...getSpaceContentLabelsOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Get labels for space
     * Returns the labels of specific space. The number of results is limited by the &#x60;limit&#x60; parameter and additional results (if available) will be available through the &#x60;next&#x60; URL present in the &#x60;Link&#x60; response header.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the space. Only labels that the user has permission to view will be returned.
     * @param id The ID of the space for which labels should be returned.
     * @param prefix Filter the results to labels based on their prefix.
     * @param sort Used to sort the result by a particular field.
     * @param cursor Used for pagination, this opaque cursor will be returned in the &#x60;next&#x60; URL in the &#x60;Link&#x60; response header. Use the relative URL in the &#x60;Link&#x60; header to retrieve the &#x60;next&#x60; set of results.
     * @param limit Maximum number of labels per result to return. If more results exist, use the &#x60;Link&#x60; header to retrieve a relative URL that will return the next set of results.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [getSpaceLabelsOpts.config] Override http request option.
     */
    public getSpaceLabels(id: number, prefix?: 'my' | 'team', sort?: Array<LabelSortOrder>, cursor?: string, limit?: number, getSpaceLabelsOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<MultiEntityResultLabel>>;
    public getSpaceLabels(id: number, prefix?: 'my' | 'team', sort?: Array<LabelSortOrder>, cursor?: string, limit?: number, getSpaceLabelsOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getSpaceLabels.');
        }

        let queryParameters = new URLSearchParams();
        if (prefix !== undefined && prefix !== null) {
            queryParameters.append('prefix', <any>prefix);
        }
        if (sort) {
            sort.forEach((element) => {
                queryParameters.append('sort', <any>element);
            })
        }
        if (cursor !== undefined && cursor !== null) {
            queryParameters.append('cursor', <any>cursor);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // authentication (oAuthDefinitions) required
        if (this.configuration.accessToken) {
            accessTokenObservable = typeof this.configuration.accessToken === 'function'
                ? from(Promise.resolve(this.configuration.accessToken()))
                : from(Promise.resolve(this.configuration.accessToken))
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<MultiEntityResultLabel>(`${this.basePath}/spaces/${encodeURIComponent(String(id))}/labels`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        ...getSpaceLabelsOpts?.config,
                        headers: {...headers, ...getSpaceLabelsOpts?.config?.headers},
                    }
                );
            })
        );
    }
}
