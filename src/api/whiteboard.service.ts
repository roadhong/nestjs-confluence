/**
 * The Confluence Cloud REST API v2
 * This document describes Confluence\'s v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { CreateWhiteboard200Response } from '../model/createWhiteboard200Response';
import { CreateWhiteboardRequest } from '../model/createWhiteboardRequest';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class WhiteboardService {

    protected basePath = 'https://no-default/wiki/api/v2';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();
    protected httpClient: HttpService;

    constructor(httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
        this.httpClient = configuration?.httpClient || httpClient;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Create whiteboard
     * Creates a whiteboard in the space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the corresponding space. Permission to create a whiteboard in the space.
     * @param createWhiteboardRequest 
     * @param _private The whiteboard will be private. Only the user who creates this whiteboard will have permission to view and edit one.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [createWhiteboardOpts.config] Override http request option.
     */
    public createWhiteboard(createWhiteboardRequest: CreateWhiteboardRequest, _private?: boolean, createWhiteboardOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<CreateWhiteboard200Response>>;
    public createWhiteboard(createWhiteboardRequest: CreateWhiteboardRequest, _private?: boolean, createWhiteboardOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (createWhiteboardRequest === null || createWhiteboardRequest === undefined) {
            throw new Error('Required parameter createWhiteboardRequest was null or undefined when calling createWhiteboard.');
        }

        let queryParameters = new URLSearchParams();
        if (_private !== undefined && _private !== null) {
            queryParameters.append('private', <any>_private);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // authentication (oAuthDefinitions) required
        if (this.configuration.accessToken) {
            accessTokenObservable = typeof this.configuration.accessToken === 'function'
                ? from(Promise.resolve(this.configuration.accessToken()))
                : from(Promise.resolve(this.configuration.accessToken))
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<CreateWhiteboard200Response>(`${this.basePath}/whiteboards`,
                    createWhiteboardRequest,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        ...createWhiteboardOpts?.config,
                        headers: {...headers, ...createWhiteboardOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Delete whiteboard
     * Delete a whiteboard by id.  Deleting a whiteboard moves the whiteboard to the trash, where it can be restored later  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the whiteboard and its corresponding space. Permission to delete whiteboards in the space.
     * @param id The ID of the whiteboard to be deleted.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [deleteWhiteboardOpts.config] Override http request option.
     */
    public deleteWhiteboard(id: number, deleteWhiteboardOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<any>>;
    public deleteWhiteboard(id: number, deleteWhiteboardOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteWhiteboard.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // authentication (oAuthDefinitions) required
        if (this.configuration.accessToken) {
            accessTokenObservable = typeof this.configuration.accessToken === 'function'
                ? from(Promise.resolve(this.configuration.accessToken()))
                : from(Promise.resolve(this.configuration.accessToken))
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<any>(`${this.basePath}/whiteboards/${encodeURIComponent(String(id))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...deleteWhiteboardOpts?.config,
                        headers: {...headers, ...deleteWhiteboardOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Get whiteboard by id
     * Returns a specific whiteboard.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the whiteboard and its corresponding space.
     * @param id The ID of the whiteboard to be returned
     * @param includeCollaborators Includes collaborators on the whiteboard.
     * @param includeDirectChildren Includes direct children of the whiteboard, as defined in the &#x60;ChildrenResponse&#x60; object.
     * @param includeOperations Includes operations associated with this whiteboard in the response, as defined in the &#x60;Operation&#x60; object. The number of results will be limited to 50 and sorted in the default sort order. A &#x60;meta&#x60; and &#x60;_links&#x60; property will be present to indicate if more results are available and a link to retrieve the rest of the results.
     * @param includeProperties Includes content properties associated with this whiteboard in the response. The number of results will be limited to 50 and sorted in the default sort order. A &#x60;meta&#x60; and &#x60;_links&#x60; property will be present to indicate if more results are available and a link to retrieve the rest of the results.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [getWhiteboardByIdOpts.config] Override http request option.
     */
    public getWhiteboardById(id: number, includeCollaborators?: boolean, includeDirectChildren?: boolean, includeOperations?: boolean, includeProperties?: boolean, getWhiteboardByIdOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<CreateWhiteboard200Response>>;
    public getWhiteboardById(id: number, includeCollaborators?: boolean, includeDirectChildren?: boolean, includeOperations?: boolean, includeProperties?: boolean, getWhiteboardByIdOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getWhiteboardById.');
        }

        let queryParameters = new URLSearchParams();
        if (includeCollaborators !== undefined && includeCollaborators !== null) {
            queryParameters.append('include-collaborators', <any>includeCollaborators);
        }
        if (includeDirectChildren !== undefined && includeDirectChildren !== null) {
            queryParameters.append('include-direct-children', <any>includeDirectChildren);
        }
        if (includeOperations !== undefined && includeOperations !== null) {
            queryParameters.append('include-operations', <any>includeOperations);
        }
        if (includeProperties !== undefined && includeProperties !== null) {
            queryParameters.append('include-properties', <any>includeProperties);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // authentication (oAuthDefinitions) required
        if (this.configuration.accessToken) {
            accessTokenObservable = typeof this.configuration.accessToken === 'function'
                ? from(Promise.resolve(this.configuration.accessToken()))
                : from(Promise.resolve(this.configuration.accessToken))
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<CreateWhiteboard200Response>(`${this.basePath}/whiteboards/${encodeURIComponent(String(id))}`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        ...getWhiteboardByIdOpts?.config,
                        headers: {...headers, ...getWhiteboardByIdOpts?.config?.headers},
                    }
                );
            })
        );
    }
}
