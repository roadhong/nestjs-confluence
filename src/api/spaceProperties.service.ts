/**
 * The Confluence Cloud REST API v2
 * This document describes Confluence\'s v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { HttpService } from "@nestjs/axios";
import { Injectable, Optional } from "@nestjs/common";
import type { AxiosRequestConfig, AxiosResponse } from "axios";
import { Observable, from, of, switchMap } from "rxjs";
import { Configuration } from "../configuration";
import { MultiEntityResultSpaceProperty } from "../model/multiEntityResultSpaceProperty";
import { SpaceProperty } from "../model/spaceProperty";
import { SpacePropertyCreateRequest } from "../model/spacePropertyCreateRequest";
import { SpacePropertyUpdateRequest } from "../model/spacePropertyUpdateRequest";

@Injectable()
export class SpacePropertiesService {
  protected basePath = "https://no-default/wiki/api/v2";
  public defaultHeaders: Record<string, string> = {};
  public configuration = new Configuration();
  protected httpClient: HttpService;

  constructor(
    httpClient: HttpService,
    @Optional() configuration: Configuration,
  ) {
    this.configuration = configuration || this.configuration;
    this.basePath = configuration?.basePath || this.basePath;
    this.httpClient = configuration?.httpClient || httpClient;
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = "multipart/form-data";
    return consumes.includes(form);
  }

  /**
   * Create space property in space
   * Creates a new space property.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (\&#39;Can use\&#39; global permission) and \&#39;Admin\&#39; permission for the space.
   * @param spaceId The ID of the space for which space properties should be returned.
   * @param spacePropertyCreateRequest The space property to be created
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param {*} [createSpacePropertyOpts.config] Override http request option.
   */
  public createSpaceProperty(
    spaceId: number,
    spacePropertyCreateRequest: SpacePropertyCreateRequest,
    createSpacePropertyOpts?: { config?: AxiosRequestConfig },
  ): Observable<AxiosResponse<SpaceProperty>>;
  public createSpaceProperty(
    spaceId: number,
    spacePropertyCreateRequest: SpacePropertyCreateRequest,
    createSpacePropertyOpts?: { config?: AxiosRequestConfig },
  ): Observable<any> {
    if (spaceId === null || spaceId === undefined) {
      throw new Error(
        "Required parameter spaceId was null or undefined when calling createSpaceProperty.",
      );
    }

    if (
      spacePropertyCreateRequest === null ||
      spacePropertyCreateRequest === undefined
    ) {
      throw new Error(
        "Required parameter spacePropertyCreateRequest was null or undefined when calling createSpaceProperty.",
      );
    }

    let headers = { ...this.defaultHeaders };

    let accessTokenObservable: Observable<any> = of(null);

    // authentication (basicAuth) required
    if (this.configuration.username || this.configuration.password) {
      headers["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }

    // authentication (oAuthDefinitions) required
    if (this.configuration.accessToken) {
      accessTokenObservable =
        typeof this.configuration.accessToken === "function"
          ? from(Promise.resolve(this.configuration.accessToken()))
          : from(Promise.resolve(this.configuration.accessToken));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ["application/json"];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers["Accept"] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = ["application/json"];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers["Content-Type"] = httpContentTypeSelected;
    }
    return accessTokenObservable.pipe(
      switchMap((accessToken) => {
        if (accessToken) {
          headers["Authorization"] = `Bearer ${accessToken}`;
        }

        return this.httpClient.post<SpaceProperty>(
          `${this.basePath}/spaces/${encodeURIComponent(
            String(spaceId),
          )}/properties`,
          spacePropertyCreateRequest,
          {
            withCredentials: this.configuration.withCredentials,
            ...createSpacePropertyOpts?.config,
            headers: {
              ...headers,
              ...createSpacePropertyOpts?.config?.headers,
            },
          },
        );
      }),
    );
  }
  /**
   * Delete space property by id
   * Deletes a space property by its id.   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (\&#39;Can use\&#39; global permission) and \&#39;Admin\&#39; permission for the space.
   * @param spaceId The ID of the space the property belongs to.
   * @param propertyId The ID of the property to be deleted.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param {*} [deleteSpacePropertyByIdOpts.config] Override http request option.
   */
  public deleteSpacePropertyById(
    spaceId: number,
    propertyId: number,
    deleteSpacePropertyByIdOpts?: { config?: AxiosRequestConfig },
  ): Observable<AxiosResponse<any>>;
  public deleteSpacePropertyById(
    spaceId: number,
    propertyId: number,
    deleteSpacePropertyByIdOpts?: { config?: AxiosRequestConfig },
  ): Observable<any> {
    if (spaceId === null || spaceId === undefined) {
      throw new Error(
        "Required parameter spaceId was null or undefined when calling deleteSpacePropertyById.",
      );
    }

    if (propertyId === null || propertyId === undefined) {
      throw new Error(
        "Required parameter propertyId was null or undefined when calling deleteSpacePropertyById.",
      );
    }

    let headers = { ...this.defaultHeaders };

    let accessTokenObservable: Observable<any> = of(null);

    // authentication (basicAuth) required
    if (this.configuration.username || this.configuration.password) {
      headers["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }

    // authentication (oAuthDefinitions) required
    if (this.configuration.accessToken) {
      accessTokenObservable =
        typeof this.configuration.accessToken === "function"
          ? from(Promise.resolve(this.configuration.accessToken()))
          : from(Promise.resolve(this.configuration.accessToken));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers["Accept"] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return accessTokenObservable.pipe(
      switchMap((accessToken) => {
        if (accessToken) {
          headers["Authorization"] = `Bearer ${accessToken}`;
        }

        return this.httpClient.delete<any>(
          `${this.basePath}/spaces/${encodeURIComponent(
            String(spaceId),
          )}/properties/${encodeURIComponent(String(propertyId))}`,
          {
            withCredentials: this.configuration.withCredentials,
            ...deleteSpacePropertyByIdOpts?.config,
            headers: {
              ...headers,
              ...deleteSpacePropertyByIdOpts?.config?.headers,
            },
          },
        );
      }),
    );
  }
  /**
   * Get space properties in space
   * Returns all properties for the given space. Space properties are a key-value storage associated with a space. The limit parameter specifies the maximum number of results returned in a single response. Use the &#x60;link&#x60; response header to paginate through additional results.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (\&#39;Can use\&#39; global permission) and \&#39;View\&#39; permission for the space.
   * @param spaceId The ID of the space for which space properties should be returned.
   * @param key The key of the space property to retrieve. This should be used when a user knows the key of their property, but needs to retrieve the id for use in other methods.
   * @param cursor Used for pagination, this opaque cursor will be returned in the &#x60;next&#x60; URL in the &#x60;Link&#x60; response header. Use the relative URL in the &#x60;Link&#x60; header to retrieve the &#x60;next&#x60; set of results.
   * @param limit Maximum number of pages per result to return. If more results exist, use the &#x60;Link&#x60; header to retrieve a relative URL that will return the next set of results.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param {*} [getSpacePropertiesOpts.config] Override http request option.
   */
  public getSpaceProperties(
    spaceId: number,
    key?: string,
    cursor?: string,
    limit?: number,
    getSpacePropertiesOpts?: { config?: AxiosRequestConfig },
  ): Observable<AxiosResponse<MultiEntityResultSpaceProperty>>;
  public getSpaceProperties(
    spaceId: number,
    key?: string,
    cursor?: string,
    limit?: number,
    getSpacePropertiesOpts?: { config?: AxiosRequestConfig },
  ): Observable<any> {
    if (spaceId === null || spaceId === undefined) {
      throw new Error(
        "Required parameter spaceId was null or undefined when calling getSpaceProperties.",
      );
    }

    let queryParameters = new URLSearchParams();
    if (key !== undefined && key !== null) {
      queryParameters.append("key", <any>key);
    }
    if (cursor !== undefined && cursor !== null) {
      queryParameters.append("cursor", <any>cursor);
    }
    if (limit !== undefined && limit !== null) {
      queryParameters.append("limit", <any>limit);
    }

    let headers = { ...this.defaultHeaders };

    let accessTokenObservable: Observable<any> = of(null);

    // authentication (basicAuth) required
    if (this.configuration.username || this.configuration.password) {
      headers["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }

    // authentication (oAuthDefinitions) required
    if (this.configuration.accessToken) {
      accessTokenObservable =
        typeof this.configuration.accessToken === "function"
          ? from(Promise.resolve(this.configuration.accessToken()))
          : from(Promise.resolve(this.configuration.accessToken));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ["application/json"];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers["Accept"] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return accessTokenObservable.pipe(
      switchMap((accessToken) => {
        if (accessToken) {
          headers["Authorization"] = `Bearer ${accessToken}`;
        }

        return this.httpClient.get<MultiEntityResultSpaceProperty>(
          `${this.basePath}/spaces/${encodeURIComponent(
            String(spaceId),
          )}/properties`,
          {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            ...getSpacePropertiesOpts?.config,
            headers: { ...headers, ...getSpacePropertiesOpts?.config?.headers },
          },
        );
      }),
    );
  }
  /**
   * Get space property by id
   * Retrieve a space property by its id.   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (\&#39;Can use\&#39; global permission) and \&#39;View\&#39; permission for the space.
   * @param spaceId The ID of the space the property belongs to.
   * @param propertyId The ID of the property to be retrieved.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param {*} [getSpacePropertyByIdOpts.config] Override http request option.
   */
  public getSpacePropertyById(
    spaceId: number,
    propertyId: number,
    getSpacePropertyByIdOpts?: { config?: AxiosRequestConfig },
  ): Observable<AxiosResponse<SpaceProperty>>;
  public getSpacePropertyById(
    spaceId: number,
    propertyId: number,
    getSpacePropertyByIdOpts?: { config?: AxiosRequestConfig },
  ): Observable<any> {
    if (spaceId === null || spaceId === undefined) {
      throw new Error(
        "Required parameter spaceId was null or undefined when calling getSpacePropertyById.",
      );
    }

    if (propertyId === null || propertyId === undefined) {
      throw new Error(
        "Required parameter propertyId was null or undefined when calling getSpacePropertyById.",
      );
    }

    let headers = { ...this.defaultHeaders };

    let accessTokenObservable: Observable<any> = of(null);

    // authentication (basicAuth) required
    if (this.configuration.username || this.configuration.password) {
      headers["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }

    // authentication (oAuthDefinitions) required
    if (this.configuration.accessToken) {
      accessTokenObservable =
        typeof this.configuration.accessToken === "function"
          ? from(Promise.resolve(this.configuration.accessToken()))
          : from(Promise.resolve(this.configuration.accessToken));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ["application/json"];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers["Accept"] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return accessTokenObservable.pipe(
      switchMap((accessToken) => {
        if (accessToken) {
          headers["Authorization"] = `Bearer ${accessToken}`;
        }

        return this.httpClient.get<SpaceProperty>(
          `${this.basePath}/spaces/${encodeURIComponent(
            String(spaceId),
          )}/properties/${encodeURIComponent(String(propertyId))}`,
          {
            withCredentials: this.configuration.withCredentials,
            ...getSpacePropertyByIdOpts?.config,
            headers: {
              ...headers,
              ...getSpacePropertyByIdOpts?.config?.headers,
            },
          },
        );
      }),
    );
  }
  /**
   * Update space property by id
   * Update a space property by its id.   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (\&#39;Can use\&#39; global permission) and \&#39;Admin\&#39; permission for the space.
   * @param spaceId The ID of the space the property belongs to.
   * @param propertyId The ID of the property to be updated.
   * @param spacePropertyUpdateRequest The space property to be updated.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param {*} [updateSpacePropertyByIdOpts.config] Override http request option.
   */
  public updateSpacePropertyById(
    spaceId: number,
    propertyId: number,
    spacePropertyUpdateRequest: SpacePropertyUpdateRequest,
    updateSpacePropertyByIdOpts?: { config?: AxiosRequestConfig },
  ): Observable<AxiosResponse<SpaceProperty>>;
  public updateSpacePropertyById(
    spaceId: number,
    propertyId: number,
    spacePropertyUpdateRequest: SpacePropertyUpdateRequest,
    updateSpacePropertyByIdOpts?: { config?: AxiosRequestConfig },
  ): Observable<any> {
    if (spaceId === null || spaceId === undefined) {
      throw new Error(
        "Required parameter spaceId was null or undefined when calling updateSpacePropertyById.",
      );
    }

    if (propertyId === null || propertyId === undefined) {
      throw new Error(
        "Required parameter propertyId was null or undefined when calling updateSpacePropertyById.",
      );
    }

    if (
      spacePropertyUpdateRequest === null ||
      spacePropertyUpdateRequest === undefined
    ) {
      throw new Error(
        "Required parameter spacePropertyUpdateRequest was null or undefined when calling updateSpacePropertyById.",
      );
    }

    let headers = { ...this.defaultHeaders };

    let accessTokenObservable: Observable<any> = of(null);

    // authentication (basicAuth) required
    if (this.configuration.username || this.configuration.password) {
      headers["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }

    // authentication (oAuthDefinitions) required
    if (this.configuration.accessToken) {
      accessTokenObservable =
        typeof this.configuration.accessToken === "function"
          ? from(Promise.resolve(this.configuration.accessToken()))
          : from(Promise.resolve(this.configuration.accessToken));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ["application/json"];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers["Accept"] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = ["application/json"];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers["Content-Type"] = httpContentTypeSelected;
    }
    return accessTokenObservable.pipe(
      switchMap((accessToken) => {
        if (accessToken) {
          headers["Authorization"] = `Bearer ${accessToken}`;
        }

        return this.httpClient.put<SpaceProperty>(
          `${this.basePath}/spaces/${encodeURIComponent(
            String(spaceId),
          )}/properties/${encodeURIComponent(String(propertyId))}`,
          spacePropertyUpdateRequest,
          {
            withCredentials: this.configuration.withCredentials,
            ...updateSpacePropertyByIdOpts?.config,
            headers: {
              ...headers,
              ...updateSpacePropertyByIdOpts?.config?.headers,
            },
          },
        );
      }),
    );
  }
}
