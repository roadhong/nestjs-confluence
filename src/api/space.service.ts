/**
 * The Confluence Cloud REST API v2
 * This document describes Confluence\'s v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { CreateSpace201Response } from '../model/createSpace201Response';
import { CreateSpaceRequest } from '../model/createSpaceRequest';
import { GetSpaceById200Response } from '../model/getSpaceById200Response';
import { MultiEntityResultSpace } from '../model/multiEntityResultSpace';
import { SpaceDescriptionBodyRepresentation } from '../model/spaceDescriptionBodyRepresentation';
import { SpaceSortOrder } from '../model/spaceSortOrder';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class SpaceService {

    protected basePath = 'https://no-default/wiki/api/v2';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();
    protected httpClient: HttpService;

    constructor(httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
        this.httpClient = configuration?.httpClient || httpClient;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Create space
     * Creates a Space as specified in the payload.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to create spaces.
     * @param createSpaceRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [createSpaceOpts.config] Override http request option.
     */
    public createSpace(createSpaceRequest: CreateSpaceRequest, createSpaceOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<CreateSpace201Response>>;
    public createSpace(createSpaceRequest: CreateSpaceRequest, createSpaceOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (createSpaceRequest === null || createSpaceRequest === undefined) {
            throw new Error('Required parameter createSpaceRequest was null or undefined when calling createSpace.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // authentication (oAuthDefinitions) required
        if (this.configuration.accessToken) {
            accessTokenObservable = typeof this.configuration.accessToken === 'function'
                ? from(Promise.resolve(this.configuration.accessToken()))
                : from(Promise.resolve(this.configuration.accessToken))
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<CreateSpace201Response>(`${this.basePath}/spaces`,
                    createSpaceRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...createSpaceOpts?.config,
                        headers: {...headers, ...createSpaceOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Get space by id
     * Returns a specific space.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the space.
     * @param id The ID of the space to be returned.
     * @param descriptionFormat The content format type to be returned in the &#x60;description&#x60; field of the response. If available, the representation will be available under a response field of the same name under the &#x60;description&#x60; field.
     * @param includeIcon If the icon for the space should be fetched or not.
     * @param includeOperations Includes operations associated with this space in the response, as defined in the &#x60;Operation&#x60; object. The number of results will be limited to 50 and sorted in the default sort order. A &#x60;meta&#x60; and &#x60;_links&#x60; property will be present to indicate if more results are available and a link to retrieve the rest of the results.
     * @param includeProperties Includes space properties associated with this space in the response. The number of results will be limited to 50 and sorted in the default sort order. A &#x60;meta&#x60; and &#x60;_links&#x60; property will be present to indicate if more results are available and a link to retrieve the rest of the results.
     * @param includePermissions Includes space permissions associated with this space in the response. The number of results will be limited to 50 and sorted in the default sort order. A &#x60;meta&#x60; and &#x60;_links&#x60; property will be present to indicate if more results are available and a link to retrieve the rest of the results.
     * @param includeRoleAssignments Includes role assignments associated with this space in the response. This parameter is only accepted for EAP sites. The number of results will be limited to 50 and sorted in the default sort order. A &#x60;meta&#x60; and &#x60;_links&#x60; property will be present to indicate if more results are available and a link to retrieve the rest of the results.
     * @param includeLabels Includes labels associated with this space in the response. The number of results will be limited to 50 and sorted in the default sort order. A &#x60;meta&#x60; and &#x60;_links&#x60; property will be present to indicate if more results are available and a link to retrieve the rest of the results.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [getSpaceByIdOpts.config] Override http request option.
     */
    public getSpaceById(id: number, descriptionFormat?: SpaceDescriptionBodyRepresentation, includeIcon?: boolean, includeOperations?: boolean, includeProperties?: boolean, includePermissions?: boolean, includeRoleAssignments?: boolean, includeLabels?: boolean, getSpaceByIdOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<GetSpaceById200Response>>;
    public getSpaceById(id: number, descriptionFormat?: SpaceDescriptionBodyRepresentation, includeIcon?: boolean, includeOperations?: boolean, includeProperties?: boolean, includePermissions?: boolean, includeRoleAssignments?: boolean, includeLabels?: boolean, getSpaceByIdOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getSpaceById.');
        }

        let queryParameters = new URLSearchParams();
        if (descriptionFormat !== undefined && descriptionFormat !== null) {
            queryParameters.append('description-format', <any>descriptionFormat);
        }
        if (includeIcon !== undefined && includeIcon !== null) {
            queryParameters.append('include-icon', <any>includeIcon);
        }
        if (includeOperations !== undefined && includeOperations !== null) {
            queryParameters.append('include-operations', <any>includeOperations);
        }
        if (includeProperties !== undefined && includeProperties !== null) {
            queryParameters.append('include-properties', <any>includeProperties);
        }
        if (includePermissions !== undefined && includePermissions !== null) {
            queryParameters.append('include-permissions', <any>includePermissions);
        }
        if (includeRoleAssignments !== undefined && includeRoleAssignments !== null) {
            queryParameters.append('include-role-assignments', <any>includeRoleAssignments);
        }
        if (includeLabels !== undefined && includeLabels !== null) {
            queryParameters.append('include-labels', <any>includeLabels);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // authentication (oAuthDefinitions) required
        if (this.configuration.accessToken) {
            accessTokenObservable = typeof this.configuration.accessToken === 'function'
                ? from(Promise.resolve(this.configuration.accessToken()))
                : from(Promise.resolve(this.configuration.accessToken))
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<GetSpaceById200Response>(`${this.basePath}/spaces/${encodeURIComponent(String(id))}`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        ...getSpaceByIdOpts?.config,
                        headers: {...headers, ...getSpaceByIdOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Get spaces
     * Returns all spaces. The results will be sorted by id ascending. The number of results is limited by the &#x60;limit&#x60; parameter and additional results (if available) will be available through the &#x60;next&#x60; URL present in the &#x60;Link&#x60; response header.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (\&#39;Can use\&#39; global permission). Only spaces that the user has permission to view will be returned.
     * @param ids Filter the results to spaces based on their IDs. Multiple IDs can be specified as a comma-separated list.
     * @param keys Filter the results to spaces based on their keys. Multiple keys can be specified as a comma-separated list.
     * @param type Filter the results to spaces based on their type.
     * @param status Filter the results to spaces based on their status.
     * @param labels Filter the results to spaces based on their labels. Multiple labels can be specified as a comma-separated list.
     * @param favoritedBy Filter the results to spaces favorited by the user with the specified account ID.
     * @param notFavoritedBy Filter the results to spaces NOT favorited by the user with the specified account ID.
     * @param sort Used to sort the result by a particular field.
     * @param descriptionFormat The content format type to be returned in the &#x60;description&#x60; field of the response. If available, the representation will be available under a response field of the same name under the &#x60;description&#x60; field.
     * @param includeIcon If the icon for the space should be fetched or not.
     * @param cursor Used for pagination, this opaque cursor will be returned in the &#x60;next&#x60; URL in the &#x60;Link&#x60; response header. Use the relative URL in the &#x60;Link&#x60; header to retrieve the &#x60;next&#x60; set of results.
     * @param limit Maximum number of spaces per result to return. If more results exist, use the &#x60;Link&#x60; response header to retrieve a relative URL that will return the next set of results.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [getSpacesOpts.config] Override http request option.
     */
    public getSpaces(ids?: Array<number>, keys?: Array<string>, type?: 'global' | 'collaboration' | 'knowledge_base' | 'personal', status?: 'current' | 'archived', labels?: Array<string>, favoritedBy?: string, notFavoritedBy?: string, sort?: SpaceSortOrder, descriptionFormat?: SpaceDescriptionBodyRepresentation, includeIcon?: boolean, cursor?: string, limit?: number, getSpacesOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<MultiEntityResultSpace>>;
    public getSpaces(ids?: Array<number>, keys?: Array<string>, type?: 'global' | 'collaboration' | 'knowledge_base' | 'personal', status?: 'current' | 'archived', labels?: Array<string>, favoritedBy?: string, notFavoritedBy?: string, sort?: SpaceSortOrder, descriptionFormat?: SpaceDescriptionBodyRepresentation, includeIcon?: boolean, cursor?: string, limit?: number, getSpacesOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        let queryParameters = new URLSearchParams();
        if (ids) {
            ids.forEach((element) => {
                queryParameters.append('ids', <any>element);
            })
        }
        if (keys) {
            keys.forEach((element) => {
                queryParameters.append('keys', <any>element);
            })
        }
        if (type !== undefined && type !== null) {
            queryParameters.append('type', <any>type);
        }
        if (status !== undefined && status !== null) {
            queryParameters.append('status', <any>status);
        }
        if (labels) {
            labels.forEach((element) => {
                queryParameters.append('labels', <any>element);
            })
        }
        if (favoritedBy !== undefined && favoritedBy !== null) {
            queryParameters.append('favorited-by', <any>favoritedBy);
        }
        if (notFavoritedBy !== undefined && notFavoritedBy !== null) {
            queryParameters.append('not-favorited-by', <any>notFavoritedBy);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters.append('sort', <any>sort);
        }
        if (descriptionFormat !== undefined && descriptionFormat !== null) {
            queryParameters.append('description-format', <any>descriptionFormat);
        }
        if (includeIcon !== undefined && includeIcon !== null) {
            queryParameters.append('include-icon', <any>includeIcon);
        }
        if (cursor !== undefined && cursor !== null) {
            queryParameters.append('cursor', <any>cursor);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // authentication (oAuthDefinitions) required
        if (this.configuration.accessToken) {
            accessTokenObservable = typeof this.configuration.accessToken === 'function'
                ? from(Promise.resolve(this.configuration.accessToken()))
                : from(Promise.resolve(this.configuration.accessToken))
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<MultiEntityResultSpace>(`${this.basePath}/spaces`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        ...getSpacesOpts?.config,
                        headers: {...headers, ...getSpacesOpts?.config?.headers},
                    }
                );
            })
        );
    }
}
