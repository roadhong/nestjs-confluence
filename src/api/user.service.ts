/**
 * The Confluence Cloud REST API v2
 * This document describes Confluence\'s v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { CheckAccessByEmail200Response } from '../model/checkAccessByEmail200Response';
import { CheckAccessByEmailRequest } from '../model/checkAccessByEmailRequest';
import { CreateBulkUserLookupRequest } from '../model/createBulkUserLookupRequest';
import { MultiEntityResultUser } from '../model/multiEntityResultUser';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class UserService {

    protected basePath = 'https://no-default/wiki/api/v2';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();
    protected httpClient: HttpService;

    constructor(httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
        this.httpClient = configuration?.httpClient || httpClient;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Check site access for a list of emails
     * Returns the list of emails from the input list that do not have access to site.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (\&#39;Can use\&#39; global permission).
     * @param checkAccessByEmailRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [checkAccessByEmailOpts.config] Override http request option.
     */
    public checkAccessByEmail(checkAccessByEmailRequest: CheckAccessByEmailRequest, checkAccessByEmailOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<CheckAccessByEmail200Response>>;
    public checkAccessByEmail(checkAccessByEmailRequest: CheckAccessByEmailRequest, checkAccessByEmailOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (checkAccessByEmailRequest === null || checkAccessByEmailRequest === undefined) {
            throw new Error('Required parameter checkAccessByEmailRequest was null or undefined when calling checkAccessByEmail.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // authentication (oAuthDefinitions) required
        if (this.configuration.accessToken) {
            accessTokenObservable = typeof this.configuration.accessToken === 'function'
                ? from(Promise.resolve(this.configuration.accessToken()))
                : from(Promise.resolve(this.configuration.accessToken))
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<CheckAccessByEmail200Response>(`${this.basePath}/user/access/check-access-by-email`,
                    checkAccessByEmailRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...checkAccessByEmailOpts?.config,
                        headers: {...headers, ...checkAccessByEmailOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Create bulk user lookup using ids
     * Returns user details for the ids provided in the request body.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (\&#39;Can use\&#39; global permission). The user must be able to view user profiles in the Confluence site.
     * @param createBulkUserLookupRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [createBulkUserLookupOpts.config] Override http request option.
     */
    public createBulkUserLookup(createBulkUserLookupRequest: CreateBulkUserLookupRequest, createBulkUserLookupOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<MultiEntityResultUser>>;
    public createBulkUserLookup(createBulkUserLookupRequest: CreateBulkUserLookupRequest, createBulkUserLookupOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (createBulkUserLookupRequest === null || createBulkUserLookupRequest === undefined) {
            throw new Error('Required parameter createBulkUserLookupRequest was null or undefined when calling createBulkUserLookup.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // authentication (oAuthDefinitions) required
        if (this.configuration.accessToken) {
            accessTokenObservable = typeof this.configuration.accessToken === 'function'
                ? from(Promise.resolve(this.configuration.accessToken()))
                : from(Promise.resolve(this.configuration.accessToken))
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<MultiEntityResultUser>(`${this.basePath}/users-bulk`,
                    createBulkUserLookupRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...createBulkUserLookupOpts?.config,
                        headers: {...headers, ...createBulkUserLookupOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * Invite a list of emails to the site
     * Invite a list of emails to the site.  Ignores all invalid emails and no action is taken for the emails that already have access to the site.  &lt;b&gt;NOTE:&lt;/b&gt; This API is asynchronous and may take some time to complete.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to access the Confluence site (\&#39;Can use\&#39; global permission).
     * @param checkAccessByEmailRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [inviteByEmailOpts.config] Override http request option.
     */
    public inviteByEmail(checkAccessByEmailRequest: CheckAccessByEmailRequest, inviteByEmailOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<any>>;
    public inviteByEmail(checkAccessByEmailRequest: CheckAccessByEmailRequest, inviteByEmailOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (checkAccessByEmailRequest === null || checkAccessByEmailRequest === undefined) {
            throw new Error('Required parameter checkAccessByEmailRequest was null or undefined when calling inviteByEmail.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // authentication (oAuthDefinitions) required
        if (this.configuration.accessToken) {
            accessTokenObservable = typeof this.configuration.accessToken === 'function'
                ? from(Promise.resolve(this.configuration.accessToken()))
                : from(Promise.resolve(this.configuration.accessToken))
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/user/access/invite-by-email`,
                    checkAccessByEmailRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...inviteByEmailOpts?.config,
                        headers: {...headers, ...inviteByEmailOpts?.config?.headers},
                    }
                );
            })
        );
    }
}
