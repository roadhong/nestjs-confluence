/**
 * The Confluence Cloud REST API v2
 * This document describes Confluence\'s v2 APIs. This is intended to be an iteration on the existing Confluence Cloud REST API with improvements in both endpoint definitions and performance.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { HttpService } from "@nestjs/axios";
import { Injectable, Optional } from "@nestjs/common";
import type { AxiosRequestConfig, AxiosResponse } from "axios";
import { Observable, from, of, switchMap } from "rxjs";
import { Configuration } from "../configuration";
import { CustomContentBodyRepresentation } from "../model/customContentBodyRepresentation";
import { DetailedVersion } from "../model/detailedVersion";
import { MultiEntityResultVersion } from "../model/multiEntityResultVersion";
import { MultiEntityResultVersion1 } from "../model/multiEntityResultVersion1";
import { MultiEntityResultVersion2 } from "../model/multiEntityResultVersion2";
import { MultiEntityResultVersion3 } from "../model/multiEntityResultVersion3";
import { MultiEntityResultVersion4 } from "../model/multiEntityResultVersion4";
import { PrimaryBodyRepresentation } from "../model/primaryBodyRepresentation";
import { VersionSortOrder } from "../model/versionSortOrder";

@Injectable()
export class VersionService {
  protected basePath = "https://no-default/wiki/api/v2";
  public defaultHeaders: Record<string, string> = {};
  public configuration = new Configuration();
  protected httpClient: HttpService;

  constructor(
    httpClient: HttpService,
    @Optional() configuration: Configuration,
  ) {
    this.configuration = configuration || this.configuration;
    this.basePath = configuration?.basePath || this.basePath;
    this.httpClient = configuration?.httpClient || httpClient;
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = "multipart/form-data";
    return consumes.includes(form);
  }

  /**
   * Get version details for attachment version
   * Retrieves version details for the specified attachment and version number.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the attachment.
   * @param attachmentId The ID of the attachment for which version details should be returned.
   * @param versionNumber The version number of the attachment to be returned.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param {*} [getAttachmentVersionDetailsOpts.config] Override http request option.
   */
  public getAttachmentVersionDetails(
    attachmentId: string,
    versionNumber: number,
    getAttachmentVersionDetailsOpts?: { config?: AxiosRequestConfig },
  ): Observable<AxiosResponse<DetailedVersion>>;
  public getAttachmentVersionDetails(
    attachmentId: string,
    versionNumber: number,
    getAttachmentVersionDetailsOpts?: { config?: AxiosRequestConfig },
  ): Observable<any> {
    if (attachmentId === null || attachmentId === undefined) {
      throw new Error(
        "Required parameter attachmentId was null or undefined when calling getAttachmentVersionDetails.",
      );
    }

    if (versionNumber === null || versionNumber === undefined) {
      throw new Error(
        "Required parameter versionNumber was null or undefined when calling getAttachmentVersionDetails.",
      );
    }

    let headers = { ...this.defaultHeaders };

    let accessTokenObservable: Observable<any> = of(null);

    // authentication (basicAuth) required
    if (this.configuration.username || this.configuration.password) {
      headers["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }

    // authentication (oAuthDefinitions) required
    if (this.configuration.accessToken) {
      accessTokenObservable =
        typeof this.configuration.accessToken === "function"
          ? from(Promise.resolve(this.configuration.accessToken()))
          : from(Promise.resolve(this.configuration.accessToken));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ["application/json"];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers["Accept"] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return accessTokenObservable.pipe(
      switchMap((accessToken) => {
        if (accessToken) {
          headers["Authorization"] = `Bearer ${accessToken}`;
        }

        return this.httpClient.get<DetailedVersion>(
          `${this.basePath}/attachments/${encodeURIComponent(
            String(attachmentId),
          )}/versions/${encodeURIComponent(String(versionNumber))}`,
          {
            withCredentials: this.configuration.withCredentials,
            ...getAttachmentVersionDetailsOpts?.config,
            headers: {
              ...headers,
              ...getAttachmentVersionDetailsOpts?.config?.headers,
            },
          },
        );
      }),
    );
  }
  /**
   * Get attachment versions
   * Returns the versions of specific attachment.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the attachment and its corresponding space.
   * @param id The ID of the attachment to be queried for its versions. If you don\&#39;t know the attachment ID, use Get attachments and filter the results.
   * @param cursor Used for pagination, this opaque cursor will be returned in the &#x60;next&#x60; URL in the &#x60;Link&#x60; response header. Use the relative URL in the &#x60;Link&#x60; header to retrieve the &#x60;next&#x60; set of results.
   * @param limit Maximum number of versions per result to return. If more results exist, use the &#x60;Link&#x60; header to retrieve a relative URL that will return the next set of results.
   * @param sort Used to sort the result by a particular field.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param {*} [getAttachmentVersionsOpts.config] Override http request option.
   */
  public getAttachmentVersions(
    id: string,
    cursor?: string,
    limit?: number,
    sort?: VersionSortOrder,
    getAttachmentVersionsOpts?: { config?: AxiosRequestConfig },
  ): Observable<AxiosResponse<MultiEntityResultVersion>>;
  public getAttachmentVersions(
    id: string,
    cursor?: string,
    limit?: number,
    sort?: VersionSortOrder,
    getAttachmentVersionsOpts?: { config?: AxiosRequestConfig },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling getAttachmentVersions.",
      );
    }

    let queryParameters = new URLSearchParams();
    if (cursor !== undefined && cursor !== null) {
      queryParameters.append("cursor", <any>cursor);
    }
    if (limit !== undefined && limit !== null) {
      queryParameters.append("limit", <any>limit);
    }
    if (sort !== undefined && sort !== null) {
      queryParameters.append("sort", <any>sort);
    }

    let headers = { ...this.defaultHeaders };

    let accessTokenObservable: Observable<any> = of(null);

    // authentication (basicAuth) required
    if (this.configuration.username || this.configuration.password) {
      headers["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }

    // authentication (oAuthDefinitions) required
    if (this.configuration.accessToken) {
      accessTokenObservable =
        typeof this.configuration.accessToken === "function"
          ? from(Promise.resolve(this.configuration.accessToken()))
          : from(Promise.resolve(this.configuration.accessToken));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ["application/json"];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers["Accept"] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return accessTokenObservable.pipe(
      switchMap((accessToken) => {
        if (accessToken) {
          headers["Authorization"] = `Bearer ${accessToken}`;
        }

        return this.httpClient.get<MultiEntityResultVersion>(
          `${this.basePath}/attachments/${encodeURIComponent(
            String(id),
          )}/versions`,
          {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            ...getAttachmentVersionsOpts?.config,
            headers: {
              ...headers,
              ...getAttachmentVersionsOpts?.config?.headers,
            },
          },
        );
      }),
    );
  }
  /**
   * Get version details for blog post version
   * Retrieves version details for the specified blog post and version number.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the blog post.
   * @param blogpostId The ID of the blog post for which version details should be returned.
   * @param versionNumber The version number of the blog post to be returned.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param {*} [getBlogPostVersionDetailsOpts.config] Override http request option.
   */
  public getBlogPostVersionDetails(
    blogpostId: number,
    versionNumber: number,
    getBlogPostVersionDetailsOpts?: { config?: AxiosRequestConfig },
  ): Observable<AxiosResponse<DetailedVersion>>;
  public getBlogPostVersionDetails(
    blogpostId: number,
    versionNumber: number,
    getBlogPostVersionDetailsOpts?: { config?: AxiosRequestConfig },
  ): Observable<any> {
    if (blogpostId === null || blogpostId === undefined) {
      throw new Error(
        "Required parameter blogpostId was null or undefined when calling getBlogPostVersionDetails.",
      );
    }

    if (versionNumber === null || versionNumber === undefined) {
      throw new Error(
        "Required parameter versionNumber was null or undefined when calling getBlogPostVersionDetails.",
      );
    }

    let headers = { ...this.defaultHeaders };

    let accessTokenObservable: Observable<any> = of(null);

    // authentication (basicAuth) required
    if (this.configuration.username || this.configuration.password) {
      headers["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }

    // authentication (oAuthDefinitions) required
    if (this.configuration.accessToken) {
      accessTokenObservable =
        typeof this.configuration.accessToken === "function"
          ? from(Promise.resolve(this.configuration.accessToken()))
          : from(Promise.resolve(this.configuration.accessToken));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ["application/json"];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers["Accept"] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return accessTokenObservable.pipe(
      switchMap((accessToken) => {
        if (accessToken) {
          headers["Authorization"] = `Bearer ${accessToken}`;
        }

        return this.httpClient.get<DetailedVersion>(
          `${this.basePath}/blogposts/${encodeURIComponent(
            String(blogpostId),
          )}/versions/${encodeURIComponent(String(versionNumber))}`,
          {
            withCredentials: this.configuration.withCredentials,
            ...getBlogPostVersionDetailsOpts?.config,
            headers: {
              ...headers,
              ...getBlogPostVersionDetailsOpts?.config?.headers,
            },
          },
        );
      }),
    );
  }
  /**
   * Get blog post versions
   * Returns the versions of specific blog post.   **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the blog post and its corresponding space.
   * @param id The ID of the blog post to be queried for its versions. If you don\&#39;t know the blog post ID, use Get blog posts and filter the results.
   * @param bodyFormat The content format types to be returned in the &#x60;body&#x60; field of the response. If available, the representation will be available under a response field of the same name under the &#x60;body&#x60; field.
   * @param cursor Used for pagination, this opaque cursor will be returned in the &#x60;next&#x60; URL in the &#x60;Link&#x60; response header. Use the relative URL in the &#x60;Link&#x60; header to retrieve the &#x60;next&#x60; set of results.
   * @param limit Maximum number of versions per result to return. If more results exist, use the &#x60;Link&#x60; header to retrieve a relative URL that will return the next set of results.
   * @param sort Used to sort the result by a particular field.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param {*} [getBlogPostVersionsOpts.config] Override http request option.
   */
  public getBlogPostVersions(
    id: number,
    bodyFormat?: PrimaryBodyRepresentation,
    cursor?: string,
    limit?: number,
    sort?: VersionSortOrder,
    getBlogPostVersionsOpts?: { config?: AxiosRequestConfig },
  ): Observable<AxiosResponse<MultiEntityResultVersion1>>;
  public getBlogPostVersions(
    id: number,
    bodyFormat?: PrimaryBodyRepresentation,
    cursor?: string,
    limit?: number,
    sort?: VersionSortOrder,
    getBlogPostVersionsOpts?: { config?: AxiosRequestConfig },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling getBlogPostVersions.",
      );
    }

    let queryParameters = new URLSearchParams();
    if (bodyFormat !== undefined && bodyFormat !== null) {
      queryParameters.append("body-format", <any>bodyFormat);
    }
    if (cursor !== undefined && cursor !== null) {
      queryParameters.append("cursor", <any>cursor);
    }
    if (limit !== undefined && limit !== null) {
      queryParameters.append("limit", <any>limit);
    }
    if (sort !== undefined && sort !== null) {
      queryParameters.append("sort", <any>sort);
    }

    let headers = { ...this.defaultHeaders };

    let accessTokenObservable: Observable<any> = of(null);

    // authentication (basicAuth) required
    if (this.configuration.username || this.configuration.password) {
      headers["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }

    // authentication (oAuthDefinitions) required
    if (this.configuration.accessToken) {
      accessTokenObservable =
        typeof this.configuration.accessToken === "function"
          ? from(Promise.resolve(this.configuration.accessToken()))
          : from(Promise.resolve(this.configuration.accessToken));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ["application/json"];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers["Accept"] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return accessTokenObservable.pipe(
      switchMap((accessToken) => {
        if (accessToken) {
          headers["Authorization"] = `Bearer ${accessToken}`;
        }

        return this.httpClient.get<MultiEntityResultVersion1>(
          `${this.basePath}/blogposts/${encodeURIComponent(
            String(id),
          )}/versions`,
          {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            ...getBlogPostVersionsOpts?.config,
            headers: {
              ...headers,
              ...getBlogPostVersionsOpts?.config?.headers,
            },
          },
        );
      }),
    );
  }
  /**
   * Get version details for custom content version
   * Retrieves version details for the specified custom content and version number.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the page.
   * @param customContentId The ID of the custom content for which version details should be returned.
   * @param versionNumber The version number of the custom content to be returned.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param {*} [getCustomContentVersionDetailsOpts.config] Override http request option.
   */
  public getCustomContentVersionDetails(
    customContentId: number,
    versionNumber: number,
    getCustomContentVersionDetailsOpts?: { config?: AxiosRequestConfig },
  ): Observable<AxiosResponse<DetailedVersion>>;
  public getCustomContentVersionDetails(
    customContentId: number,
    versionNumber: number,
    getCustomContentVersionDetailsOpts?: { config?: AxiosRequestConfig },
  ): Observable<any> {
    if (customContentId === null || customContentId === undefined) {
      throw new Error(
        "Required parameter customContentId was null or undefined when calling getCustomContentVersionDetails.",
      );
    }

    if (versionNumber === null || versionNumber === undefined) {
      throw new Error(
        "Required parameter versionNumber was null or undefined when calling getCustomContentVersionDetails.",
      );
    }

    let headers = { ...this.defaultHeaders };

    let accessTokenObservable: Observable<any> = of(null);

    // authentication (basicAuth) required
    if (this.configuration.username || this.configuration.password) {
      headers["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }

    // authentication (oAuthDefinitions) required
    if (this.configuration.accessToken) {
      accessTokenObservable =
        typeof this.configuration.accessToken === "function"
          ? from(Promise.resolve(this.configuration.accessToken()))
          : from(Promise.resolve(this.configuration.accessToken));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ["application/json"];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers["Accept"] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return accessTokenObservable.pipe(
      switchMap((accessToken) => {
        if (accessToken) {
          headers["Authorization"] = `Bearer ${accessToken}`;
        }

        return this.httpClient.get<DetailedVersion>(
          `${this.basePath}/custom-content/${encodeURIComponent(
            String(customContentId),
          )}/versions/${encodeURIComponent(String(versionNumber))}`,
          {
            withCredentials: this.configuration.withCredentials,
            ...getCustomContentVersionDetailsOpts?.config,
            headers: {
              ...headers,
              ...getCustomContentVersionDetailsOpts?.config?.headers,
            },
          },
        );
      }),
    );
  }
  /**
   * Get custom content versions
   * Returns the versions of specific custom content.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the custom content and its corresponding page and space.
   * @param customContentId The ID of the custom content to be queried for its versions. If you don\&#39;t know the custom content ID, use Get custom-content by type and filter the results.
   * @param bodyFormat The content format types to be returned in the &#x60;body&#x60; field of the response. If available, the representation will be available under a response field of the same name under the &#x60;body&#x60; field.  Note: If the custom content body type is &#x60;storage&#x60;, the &#x60;storage&#x60; and &#x60;atlas_doc_format&#x60; body formats are able to be returned. If the custom content body type is &#x60;raw&#x60;, only the &#x60;raw&#x60; body format is able to be returned.
   * @param cursor Used for pagination, this opaque cursor will be returned in the &#x60;next&#x60; URL in the &#x60;Link&#x60; response header. Use the relative URL in the &#x60;Link&#x60; header to retrieve the &#x60;next&#x60; set of results.
   * @param limit Maximum number of versions per result to return. If more results exist, use the &#x60;Link&#x60; header to retrieve a relative URL that will return the next set of results.
   * @param sort Used to sort the result by a particular field.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param {*} [getCustomContentVersionsOpts.config] Override http request option.
   */
  public getCustomContentVersions(
    customContentId: number,
    bodyFormat?: CustomContentBodyRepresentation,
    cursor?: string,
    limit?: number,
    sort?: VersionSortOrder,
    getCustomContentVersionsOpts?: { config?: AxiosRequestConfig },
  ): Observable<AxiosResponse<MultiEntityResultVersion3>>;
  public getCustomContentVersions(
    customContentId: number,
    bodyFormat?: CustomContentBodyRepresentation,
    cursor?: string,
    limit?: number,
    sort?: VersionSortOrder,
    getCustomContentVersionsOpts?: { config?: AxiosRequestConfig },
  ): Observable<any> {
    if (customContentId === null || customContentId === undefined) {
      throw new Error(
        "Required parameter customContentId was null or undefined when calling getCustomContentVersions.",
      );
    }

    let queryParameters = new URLSearchParams();
    if (bodyFormat !== undefined && bodyFormat !== null) {
      queryParameters.append("body-format", <any>bodyFormat);
    }
    if (cursor !== undefined && cursor !== null) {
      queryParameters.append("cursor", <any>cursor);
    }
    if (limit !== undefined && limit !== null) {
      queryParameters.append("limit", <any>limit);
    }
    if (sort !== undefined && sort !== null) {
      queryParameters.append("sort", <any>sort);
    }

    let headers = { ...this.defaultHeaders };

    let accessTokenObservable: Observable<any> = of(null);

    // authentication (basicAuth) required
    if (this.configuration.username || this.configuration.password) {
      headers["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }

    // authentication (oAuthDefinitions) required
    if (this.configuration.accessToken) {
      accessTokenObservable =
        typeof this.configuration.accessToken === "function"
          ? from(Promise.resolve(this.configuration.accessToken()))
          : from(Promise.resolve(this.configuration.accessToken));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ["application/json"];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers["Accept"] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return accessTokenObservable.pipe(
      switchMap((accessToken) => {
        if (accessToken) {
          headers["Authorization"] = `Bearer ${accessToken}`;
        }

        return this.httpClient.get<MultiEntityResultVersion3>(
          `${this.basePath}/custom-content/${encodeURIComponent(
            String(customContentId),
          )}/versions`,
          {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            ...getCustomContentVersionsOpts?.config,
            headers: {
              ...headers,
              ...getCustomContentVersionsOpts?.config?.headers,
            },
          },
        );
      }),
    );
  }
  /**
   * Get version details for footer comment version
   * Retrieves version details for the specified footer comment version.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content of the page or blog post and its corresponding space.
   * @param id The ID of the footer comment for which version details should be returned.
   * @param versionNumber The version number of the footer comment to be returned.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param {*} [getFooterCommentVersionDetailsOpts.config] Override http request option.
   */
  public getFooterCommentVersionDetails(
    id: number,
    versionNumber: number,
    getFooterCommentVersionDetailsOpts?: { config?: AxiosRequestConfig },
  ): Observable<AxiosResponse<DetailedVersion>>;
  public getFooterCommentVersionDetails(
    id: number,
    versionNumber: number,
    getFooterCommentVersionDetailsOpts?: { config?: AxiosRequestConfig },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling getFooterCommentVersionDetails.",
      );
    }

    if (versionNumber === null || versionNumber === undefined) {
      throw new Error(
        "Required parameter versionNumber was null or undefined when calling getFooterCommentVersionDetails.",
      );
    }

    let headers = { ...this.defaultHeaders };

    let accessTokenObservable: Observable<any> = of(null);

    // authentication (basicAuth) required
    if (this.configuration.username || this.configuration.password) {
      headers["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }

    // authentication (oAuthDefinitions) required
    if (this.configuration.accessToken) {
      accessTokenObservable =
        typeof this.configuration.accessToken === "function"
          ? from(Promise.resolve(this.configuration.accessToken()))
          : from(Promise.resolve(this.configuration.accessToken));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ["application/json"];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers["Accept"] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return accessTokenObservable.pipe(
      switchMap((accessToken) => {
        if (accessToken) {
          headers["Authorization"] = `Bearer ${accessToken}`;
        }

        return this.httpClient.get<DetailedVersion>(
          `${this.basePath}/footer-comments/${encodeURIComponent(
            String(id),
          )}/versions/${encodeURIComponent(String(versionNumber))}`,
          {
            withCredentials: this.configuration.withCredentials,
            ...getFooterCommentVersionDetailsOpts?.config,
            headers: {
              ...headers,
              ...getFooterCommentVersionDetailsOpts?.config?.headers,
            },
          },
        );
      }),
    );
  }
  /**
   * Get footer comment versions
   * Retrieves the versions of the specified footer comment.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content of the page or blog post and its corresponding space.
   * @param id The ID of the footer comment for which versions should be returned
   * @param bodyFormat The content format types to be returned in the &#x60;body&#x60; field of the response. If available, the representation will be available under a response field of the same name under the &#x60;body&#x60; field.
   * @param cursor Used for pagination, this opaque cursor will be returned in the &#x60;next&#x60; URL in the &#x60;Link&#x60; response header. Use the relative URL in the &#x60;Link&#x60; header to retrieve the &#x60;next&#x60; set of results.
   * @param limit Maximum number of versions per result to return. If more results exist, use the &#x60;Link&#x60; header to retrieve a relative URL that will return the next set of results.
   * @param sort Used to sort the result by a particular field.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param {*} [getFooterCommentVersionsOpts.config] Override http request option.
   */
  public getFooterCommentVersions(
    id: number,
    bodyFormat?: PrimaryBodyRepresentation,
    cursor?: string,
    limit?: number,
    sort?: VersionSortOrder,
    getFooterCommentVersionsOpts?: { config?: AxiosRequestConfig },
  ): Observable<AxiosResponse<MultiEntityResultVersion4>>;
  public getFooterCommentVersions(
    id: number,
    bodyFormat?: PrimaryBodyRepresentation,
    cursor?: string,
    limit?: number,
    sort?: VersionSortOrder,
    getFooterCommentVersionsOpts?: { config?: AxiosRequestConfig },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling getFooterCommentVersions.",
      );
    }

    let queryParameters = new URLSearchParams();
    if (bodyFormat !== undefined && bodyFormat !== null) {
      queryParameters.append("body-format", <any>bodyFormat);
    }
    if (cursor !== undefined && cursor !== null) {
      queryParameters.append("cursor", <any>cursor);
    }
    if (limit !== undefined && limit !== null) {
      queryParameters.append("limit", <any>limit);
    }
    if (sort !== undefined && sort !== null) {
      queryParameters.append("sort", <any>sort);
    }

    let headers = { ...this.defaultHeaders };

    let accessTokenObservable: Observable<any> = of(null);

    // authentication (basicAuth) required
    if (this.configuration.username || this.configuration.password) {
      headers["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }

    // authentication (oAuthDefinitions) required
    if (this.configuration.accessToken) {
      accessTokenObservable =
        typeof this.configuration.accessToken === "function"
          ? from(Promise.resolve(this.configuration.accessToken()))
          : from(Promise.resolve(this.configuration.accessToken));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ["application/json"];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers["Accept"] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return accessTokenObservable.pipe(
      switchMap((accessToken) => {
        if (accessToken) {
          headers["Authorization"] = `Bearer ${accessToken}`;
        }

        return this.httpClient.get<MultiEntityResultVersion4>(
          `${this.basePath}/footer-comments/${encodeURIComponent(
            String(id),
          )}/versions`,
          {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            ...getFooterCommentVersionsOpts?.config,
            headers: {
              ...headers,
              ...getFooterCommentVersionsOpts?.config?.headers,
            },
          },
        );
      }),
    );
  }
  /**
   * Get version details for inline comment version
   * Retrieves version details for the specified inline comment version.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content of the page or blog post and its corresponding space.
   * @param id The ID of the inline comment for which version details should be returned.
   * @param versionNumber The version number of the inline comment to be returned.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param {*} [getInlineCommentVersionDetailsOpts.config] Override http request option.
   */
  public getInlineCommentVersionDetails(
    id: number,
    versionNumber: number,
    getInlineCommentVersionDetailsOpts?: { config?: AxiosRequestConfig },
  ): Observable<AxiosResponse<DetailedVersion>>;
  public getInlineCommentVersionDetails(
    id: number,
    versionNumber: number,
    getInlineCommentVersionDetailsOpts?: { config?: AxiosRequestConfig },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling getInlineCommentVersionDetails.",
      );
    }

    if (versionNumber === null || versionNumber === undefined) {
      throw new Error(
        "Required parameter versionNumber was null or undefined when calling getInlineCommentVersionDetails.",
      );
    }

    let headers = { ...this.defaultHeaders };

    let accessTokenObservable: Observable<any> = of(null);

    // authentication (basicAuth) required
    if (this.configuration.username || this.configuration.password) {
      headers["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }

    // authentication (oAuthDefinitions) required
    if (this.configuration.accessToken) {
      accessTokenObservable =
        typeof this.configuration.accessToken === "function"
          ? from(Promise.resolve(this.configuration.accessToken()))
          : from(Promise.resolve(this.configuration.accessToken));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ["application/json"];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers["Accept"] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return accessTokenObservable.pipe(
      switchMap((accessToken) => {
        if (accessToken) {
          headers["Authorization"] = `Bearer ${accessToken}`;
        }

        return this.httpClient.get<DetailedVersion>(
          `${this.basePath}/inline-comments/${encodeURIComponent(
            String(id),
          )}/versions/${encodeURIComponent(String(versionNumber))}`,
          {
            withCredentials: this.configuration.withCredentials,
            ...getInlineCommentVersionDetailsOpts?.config,
            headers: {
              ...headers,
              ...getInlineCommentVersionDetailsOpts?.config?.headers,
            },
          },
        );
      }),
    );
  }
  /**
   * Get inline comment versions
   * Retrieves the versions of the specified inline comment.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content of the page or blog post and its corresponding space.
   * @param id The ID of the inline comment for which versions should be returned
   * @param bodyFormat The content format types to be returned in the &#x60;body&#x60; field of the response. If available, the representation will be available under a response field of the same name under the &#x60;body&#x60; field.
   * @param cursor Used for pagination, this opaque cursor will be returned in the &#x60;next&#x60; URL in the &#x60;Link&#x60; response header. Use the relative URL in the &#x60;Link&#x60; header to retrieve the &#x60;next&#x60; set of results.
   * @param limit Maximum number of versions per result to return. If more results exist, use the &#x60;Link&#x60; header to retrieve a relative URL that will return the next set of results.
   * @param sort Used to sort the result by a particular field.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param {*} [getInlineCommentVersionsOpts.config] Override http request option.
   */
  public getInlineCommentVersions(
    id: number,
    bodyFormat?: PrimaryBodyRepresentation,
    cursor?: string,
    limit?: number,
    sort?: VersionSortOrder,
    getInlineCommentVersionsOpts?: { config?: AxiosRequestConfig },
  ): Observable<AxiosResponse<MultiEntityResultVersion4>>;
  public getInlineCommentVersions(
    id: number,
    bodyFormat?: PrimaryBodyRepresentation,
    cursor?: string,
    limit?: number,
    sort?: VersionSortOrder,
    getInlineCommentVersionsOpts?: { config?: AxiosRequestConfig },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling getInlineCommentVersions.",
      );
    }

    let queryParameters = new URLSearchParams();
    if (bodyFormat !== undefined && bodyFormat !== null) {
      queryParameters.append("body-format", <any>bodyFormat);
    }
    if (cursor !== undefined && cursor !== null) {
      queryParameters.append("cursor", <any>cursor);
    }
    if (limit !== undefined && limit !== null) {
      queryParameters.append("limit", <any>limit);
    }
    if (sort !== undefined && sort !== null) {
      queryParameters.append("sort", <any>sort);
    }

    let headers = { ...this.defaultHeaders };

    let accessTokenObservable: Observable<any> = of(null);

    // authentication (basicAuth) required
    if (this.configuration.username || this.configuration.password) {
      headers["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }

    // authentication (oAuthDefinitions) required
    if (this.configuration.accessToken) {
      accessTokenObservable =
        typeof this.configuration.accessToken === "function"
          ? from(Promise.resolve(this.configuration.accessToken()))
          : from(Promise.resolve(this.configuration.accessToken));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ["application/json"];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers["Accept"] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return accessTokenObservable.pipe(
      switchMap((accessToken) => {
        if (accessToken) {
          headers["Authorization"] = `Bearer ${accessToken}`;
        }

        return this.httpClient.get<MultiEntityResultVersion4>(
          `${this.basePath}/inline-comments/${encodeURIComponent(
            String(id),
          )}/versions`,
          {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            ...getInlineCommentVersionsOpts?.config,
            headers: {
              ...headers,
              ...getInlineCommentVersionsOpts?.config?.headers,
            },
          },
        );
      }),
    );
  }
  /**
   * Get version details for page version
   * Retrieves version details for the specified page and version number.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the page.
   * @param pageId The ID of the page for which version details should be returned.
   * @param versionNumber The version number of the page to be returned.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param {*} [getPageVersionDetailsOpts.config] Override http request option.
   */
  public getPageVersionDetails(
    pageId: number,
    versionNumber: number,
    getPageVersionDetailsOpts?: { config?: AxiosRequestConfig },
  ): Observable<AxiosResponse<DetailedVersion>>;
  public getPageVersionDetails(
    pageId: number,
    versionNumber: number,
    getPageVersionDetailsOpts?: { config?: AxiosRequestConfig },
  ): Observable<any> {
    if (pageId === null || pageId === undefined) {
      throw new Error(
        "Required parameter pageId was null or undefined when calling getPageVersionDetails.",
      );
    }

    if (versionNumber === null || versionNumber === undefined) {
      throw new Error(
        "Required parameter versionNumber was null or undefined when calling getPageVersionDetails.",
      );
    }

    let headers = { ...this.defaultHeaders };

    let accessTokenObservable: Observable<any> = of(null);

    // authentication (basicAuth) required
    if (this.configuration.username || this.configuration.password) {
      headers["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }

    // authentication (oAuthDefinitions) required
    if (this.configuration.accessToken) {
      accessTokenObservable =
        typeof this.configuration.accessToken === "function"
          ? from(Promise.resolve(this.configuration.accessToken()))
          : from(Promise.resolve(this.configuration.accessToken));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ["application/json"];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers["Accept"] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return accessTokenObservable.pipe(
      switchMap((accessToken) => {
        if (accessToken) {
          headers["Authorization"] = `Bearer ${accessToken}`;
        }

        return this.httpClient.get<DetailedVersion>(
          `${this.basePath}/pages/${encodeURIComponent(
            String(pageId),
          )}/versions/${encodeURIComponent(String(versionNumber))}`,
          {
            withCredentials: this.configuration.withCredentials,
            ...getPageVersionDetailsOpts?.config,
            headers: {
              ...headers,
              ...getPageVersionDetailsOpts?.config?.headers,
            },
          },
        );
      }),
    );
  }
  /**
   * Get page versions
   * Returns the versions of specific page.  **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the page and its corresponding space.
   * @param id The ID of the page to be queried for its versions. If you don\&#39;t know the page ID, use Get pages and filter the results.
   * @param bodyFormat The content format types to be returned in the &#x60;body&#x60; field of the response. If available, the representation will be available under a response field of the same name under the &#x60;body&#x60; field.
   * @param cursor Used for pagination, this opaque cursor will be returned in the &#x60;next&#x60; URL in the &#x60;Link&#x60; response header. Use the relative URL in the &#x60;Link&#x60; header to retrieve the &#x60;next&#x60; set of results.
   * @param limit Maximum number of versions per result to return. If more results exist, use the &#x60;Link&#x60; header to retrieve a relative URL that will return the next set of results.
   * @param sort Used to sort the result by a particular field.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   * @param {*} [getPageVersionsOpts.config] Override http request option.
   */
  public getPageVersions(
    id: number,
    bodyFormat?: PrimaryBodyRepresentation,
    cursor?: string,
    limit?: number,
    sort?: VersionSortOrder,
    getPageVersionsOpts?: { config?: AxiosRequestConfig },
  ): Observable<AxiosResponse<MultiEntityResultVersion2>>;
  public getPageVersions(
    id: number,
    bodyFormat?: PrimaryBodyRepresentation,
    cursor?: string,
    limit?: number,
    sort?: VersionSortOrder,
    getPageVersionsOpts?: { config?: AxiosRequestConfig },
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        "Required parameter id was null or undefined when calling getPageVersions.",
      );
    }

    let queryParameters = new URLSearchParams();
    if (bodyFormat !== undefined && bodyFormat !== null) {
      queryParameters.append("body-format", <any>bodyFormat);
    }
    if (cursor !== undefined && cursor !== null) {
      queryParameters.append("cursor", <any>cursor);
    }
    if (limit !== undefined && limit !== null) {
      queryParameters.append("limit", <any>limit);
    }
    if (sort !== undefined && sort !== null) {
      queryParameters.append("sort", <any>sort);
    }

    let headers = { ...this.defaultHeaders };

    let accessTokenObservable: Observable<any> = of(null);

    // authentication (basicAuth) required
    if (this.configuration.username || this.configuration.password) {
      headers["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }

    // authentication (oAuthDefinitions) required
    if (this.configuration.accessToken) {
      accessTokenObservable =
        typeof this.configuration.accessToken === "function"
          ? from(Promise.resolve(this.configuration.accessToken()))
          : from(Promise.resolve(this.configuration.accessToken));
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ["application/json"];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers["Accept"] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return accessTokenObservable.pipe(
      switchMap((accessToken) => {
        if (accessToken) {
          headers["Authorization"] = `Bearer ${accessToken}`;
        }

        return this.httpClient.get<MultiEntityResultVersion2>(
          `${this.basePath}/pages/${encodeURIComponent(String(id))}/versions`,
          {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            ...getPageVersionsOpts?.config,
            headers: { ...headers, ...getPageVersionsOpts?.config?.headers },
          },
        );
      }),
    );
  }
}
